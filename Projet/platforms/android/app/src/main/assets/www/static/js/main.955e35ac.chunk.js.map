{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["position","options","enableHighAccuracy","timeout","maximumAge","success","pos","crd","coords","console","log","latitude","longitude","accuracy","error","err","warn","code","message","L","Icon","iconUrl","iconRetinaUrl","iconAnchor","popupAnchor","iconSize","shadowUrl","shadowSize","shadowAnchor","CustomIcons","props","update","Geolocation","getCurrentPosition","setState","marker","state","draggable","this","Marker","onLoad","setInterval","Popup","Map","center","zoom","TileLayer","attribution","url","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"qTAKIA,EAAW,CAAC,SAAU,UAGtBC,EAAU,CACZC,oBAAoB,EACpBC,QAAS,IACTC,WAAY,GAGd,SAASC,EAAQC,GACf,IAAIC,EAAMD,EAAIE,OACdC,QAAQC,IAAI,iCACZD,QAAQC,IAAR,qBAA0BH,EAAII,WAC9BF,QAAQC,IAAR,sBAA2BH,EAAIK,YAC/BH,QAAQC,IAAR,iCAAmCH,EAAIM,SAAvC,gBACAb,EAAS,CAACO,EAAII,SAASJ,EAAIK,WAI7B,SAASE,EAAMC,GACbN,QAAQO,KAAR,kBAAwBD,EAAIE,KAA5B,cAAsCF,EAAIG,UASjB,IAAIC,IAAEC,KAAK,CACpCC,QAAS,wGACTC,cAAe,4BACfC,WAAY,CAAC,EAAG,IAChBC,YAAa,CAAC,IAAK,IACnBC,SAAU,CAAC,GAAI,IACfC,UAAW,8BACXC,WAAY,CAAC,GAAI,IACjBC,aAAc,CAAC,GAAI,MAGQ,IAAIT,IAAEC,KAAK,CACtCC,QAAS,+EACTC,cAAe,6BACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,SAAU,CAAC,GAAI,IACfC,UAAW,8BACXC,WAAY,CAAC,GAAI,IACjBC,aAAc,CAAC,EAAG,MAnBb,IAsBcC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,+CAkBDC,OAAS,WACRC,IAAYC,mBAAmB5B,EAASS,EAAOb,GAC/C,EAAKiC,SAAS,CAACC,OAAOnC,KAlBtB,EAAKoC,MAAM,CACTD,OAAOnC,EACPqC,WAAW,GALI,E,iFAejBL,IAAYC,mBAAmB5B,EAASS,EAAOb,GAC/CqC,KAAKJ,SAAS,CAACC,OAAOnC,M,+BAatBS,QAAQC,IAAR,iCAAmCV,EAAnC,gBACA,IAAMmC,EACJ,kBAACI,EAAA,EAAD,CAAQvC,SAAUsC,KAAKF,MAAMD,OAEvBK,OAAQC,YAAYH,KAAKP,OAAQ,MACrC,kBAACW,EAAA,EAAD,sBAKJ,OACE,kBAACC,EAAA,EAAD,CAAKC,OAAQ5C,EAAU6C,KAAM,IAC3B,kBAACC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAELb,O,GA9CgCc,aC5CrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXJC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACLL,QAAQK,MAAMA,EAAMI,c","file":"static/js/main.955e35ac.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport L from 'leaflet'\r\nimport Geolocation from '@react-native-community/geolocation'\r\n\r\nvar position = [49.119950,6.163673]\r\n\r\n\r\nvar options = {\r\n  enableHighAccuracy: true,\r\n  timeout: 5000,\r\n  maximumAge: 0\r\n};\r\n\r\nfunction success(pos) {\r\n  var crd = pos.coords;\r\n  console.log('Votre position actuelle est :');\r\n  console.log(`Latitude : ${crd.latitude}`);\r\n  console.log(`Longitude : ${crd.longitude}`);\r\n  console.log(`La précision est de ${crd.accuracy} mètres.`);\r\n  position=[crd.latitude,crd.longitude];\r\n\r\n}\r\n\r\nfunction error(err) {\r\n  console.warn(`ERREUR (${err.code}): ${err.message}`);\r\n}\r\n\r\ntype State = {\r\n  lat: number,\r\n  lng: number,\r\n  zoom: number,\r\n}\r\n\r\nexport const pointerIcon = new L.Icon({\r\n  iconUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Bruce_Lee_1973.jpg/290px-Bruce_Lee_1973.jpg',\r\n  iconRetinaUrl: '../assets/pointerIcon.svg',\r\n  iconAnchor: [5, 55],\r\n  popupAnchor: [10, -44],\r\n  iconSize: [25, 55],\r\n  shadowUrl: '../assets/marker-shadow.png',\r\n  shadowSize: [68, 95],\r\n  shadowAnchor: [20, 92],\r\n})\r\n\r\nexport const suitcasePoint = new L.Icon({\r\n  iconUrl: 'https://images-na.ssl-images-amazon.com/images/I/61Vh5DJkCKL._AC_SL1000_.jpg',\r\n  iconRetinaUrl: '../assets/suitcaseIcon.svg',\r\n  iconAnchor: [20, 40],\r\n  popupAnchor: [0, -35],\r\n  iconSize: [40, 40],\r\n  shadowUrl: '../assets/marker-shadow.png',\r\n  shadowSize: [29, 40],\r\n  shadowAnchor: [7, 40],\r\n})\r\n\r\nexport default class CustomIcons extends Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state={\r\n      marker:position,\r\n      draggable: true,\r\n\r\n\r\n    };\r\n\r\n\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    Geolocation.getCurrentPosition(success, error, options);\r\n    this.setState({marker:position});\r\n   }\r\n\r\n   update = () =>{\r\n    Geolocation.getCurrentPosition(success, error, options);\r\n    this.setState({marker:position});\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n\r\n    console.log(`La précision est de ${position} mètres.`);\r\n    const marker =\r\n      <Marker position={this.state.marker}\r\n\r\n            onLoad={setInterval(this.update, 2000)}>\r\n        <Popup>You are here</Popup>\r\n      </Marker>\r\n\r\n\r\n\r\n    return (\r\n      <Map center={position} zoom={17}>\r\n        <TileLayer\r\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {marker}\r\n      </Map>\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\n  ReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}